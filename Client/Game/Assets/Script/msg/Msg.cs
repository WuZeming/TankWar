// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SAnBiIoYBCghUYW5rSW5mbxIKCgJpZBgBIAEoCRIMCgRj",
            "YW1wGAIgASgFEgoKAmhwGAMgASgFEg8KB2ZyYW1laWQYBCABKAUSCQoBeBgF",
            "IAEoBRIJCgF5GAYgASgFEgkKAXoYByABKAUSCgoCZXgYCCABKAUSCgoCZXkY",
            "CSABKAUSCgoCZXoYCiABKAUiPAoOTXNnRW50ZXJCYXR0bGUSGwoFdGFua3MY",
            "ASADKAsyDC5wYi5UYW5rSW5mbxINCgVtYXBJZBgCIAEoBSIiCg9Nc2dCYXR0",
            "bGVSZXN1bHQSDwoHd2luQ2FtcBgBIAEoBSIcCg5Nc2dMZWF2ZUJhdHRsZRIK",
            "CgJpZBgBIAEoCSIxCgtQbGF5ZXJJbnB1dBIJCgFVGAEgASgFEgkKAVYYAiAB",
            "KAUSDAoERmlyZRgDIAEoCCIwCg5QbGF5ZXJJbnB1dENtZBIRCglpc01pc3Np",
            "bmcYASABKAgSCwoDY21kGAIgASgMIj8KC1NlcnZlckZyYW1lEgwKBHRpY2sY",
            "ASABKAUSIgoGaW5wdXRzGAIgAygLMhIucGIuUGxheWVySW5wdXRDbWQiRQoP",
            "TXNnU2VydmVyRnJhbWVzEhEKCXN0YXJ0VGljaxgBIAEoBRIfCgZmcmFtZXMY",
            "AiADKAsyDy5wYi5TZXJ2ZXJGcmFtZSJHCg9Nc2dDbGllbnRJbnB1dHMSEAoI",
            "bGFzdFRpY2sYASABKAUSIgoGaW5wdXRzGAIgAygLMhIucGIuUGxheWVySW5w",
            "dXRDbWQiHAoMTXNnTWlzc0ZyYW1lEgwKBHRpY2sYASABKAUiTAoWTXNnTWlz",
            "c2luZ1NlcnZlckZyYW1lcxIRCglzdGFydFRpY2sYASABKAUSHwoGZnJhbWVz",
            "GAIgAygLMg8ucGIuU2VydmVyRnJhbWUiNQoLTXNnUmVnaXN0ZXISCgoCaWQY",
            "ASABKAkSCgoCcHcYAiABKAkSDgoGcmVzdWx0GAMgASgFIjIKCE1zZ0xvZ2lu",
            "EgoKAmlkGAEgASgJEgoKAnB3GAIgASgJEg4KBnJlc3VsdBgDIAEoBSIZCgdN",
            "c2dLaWNrEg4KBnJlYXNvbhgBIAEoBSIqCg1Nc2dHZXRBY2hpZXZlEgsKA3dp",
            "bhgBIAEoBRIMCgRsb3N0GAIgASgFIjUKCFJvb21JbmZvEgoKAmlkGAEgASgF",
            "Eg0KBWNvdW50GAIgASgFEg4KBnN0YXR1cxgDIAEoBSItCg5Nc2dHZXRSb29t",
            "TGlzdBIbCgVyb29tcxgBIAMoCzIMLnBiLlJvb21JbmZvIh8KDU1zZ0NyZWF0",
            "ZVJvb20SDgoGcmVzdWx0GAEgASgFIioKDE1zZ0VudGVyUm9vbRIKCgJpZBgB",
            "IAEoBRIOCgZyZXN1bHQYAiABKAUiUgoKUGxheWVySW5mbxIKCgJpZBgBIAEo",
            "CRIMCgRjYW1wGAIgASgFEgsKA3dpbhgDIAEoBRIMCgRsb3N0GAQgASgFEg8K",
            "B2lzT3duZXIYBSABKAUiMQoOTXNnR2V0Um9vbUluZm8SHwoHcGxheWVycxgB",
            "IAMoCzIOLnBiLlBsYXllckluZm8iHgoMTXNnTGVhdmVSb29tEg4KBnJlc3Vs",
            "dBgBIAEoBSIgCg5Nc2dTdGFydEJhdHRsZRIOCgZyZXN1bHQYASABKAUiFwoJ",
            "TXNnVGFua0hwEgoKAmhwGAEgASgFIj8KDU1zZ1BsYXllclBpbmcSEAoIc2Vu",
            "ZFRpbWUYASABKAMSHAoUdGltZVNpbmNlR2FtZVN0YXJ0TXMYAiABKANCBaoC",
            "AlBiYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.TankInfo), global::Pb.TankInfo.Parser, new[]{ "Id", "Camp", "Hp", "Frameid", "X", "Y", "Z", "Ex", "Ey", "Ez" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgEnterBattle), global::Pb.MsgEnterBattle.Parser, new[]{ "Tanks", "MapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgBattleResult), global::Pb.MsgBattleResult.Parser, new[]{ "WinCamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgLeaveBattle), global::Pb.MsgLeaveBattle.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.PlayerInput), global::Pb.PlayerInput.Parser, new[]{ "U", "V", "Fire" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.PlayerInputCmd), global::Pb.PlayerInputCmd.Parser, new[]{ "IsMissing", "Cmd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ServerFrame), global::Pb.ServerFrame.Parser, new[]{ "Tick", "Inputs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgServerFrames), global::Pb.MsgServerFrames.Parser, new[]{ "StartTick", "Frames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgClientInputs), global::Pb.MsgClientInputs.Parser, new[]{ "LastTick", "Inputs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgMissFrame), global::Pb.MsgMissFrame.Parser, new[]{ "Tick" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgMissingServerFrames), global::Pb.MsgMissingServerFrames.Parser, new[]{ "StartTick", "Frames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgRegister), global::Pb.MsgRegister.Parser, new[]{ "Id", "Pw", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgLogin), global::Pb.MsgLogin.Parser, new[]{ "Id", "Pw", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgKick), global::Pb.MsgKick.Parser, new[]{ "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgGetAchieve), global::Pb.MsgGetAchieve.Parser, new[]{ "Win", "Lost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.RoomInfo), global::Pb.RoomInfo.Parser, new[]{ "Id", "Count", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgGetRoomList), global::Pb.MsgGetRoomList.Parser, new[]{ "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgCreateRoom), global::Pb.MsgCreateRoom.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgEnterRoom), global::Pb.MsgEnterRoom.Parser, new[]{ "Id", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.PlayerInfo), global::Pb.PlayerInfo.Parser, new[]{ "Id", "Camp", "Win", "Lost", "IsOwner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgGetRoomInfo), global::Pb.MsgGetRoomInfo.Parser, new[]{ "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgLeaveRoom), global::Pb.MsgLeaveRoom.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgStartBattle), global::Pb.MsgStartBattle.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgTankHp), global::Pb.MsgTankHp.Parser, new[]{ "Hp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.MsgPlayerPing), global::Pb.MsgPlayerPing.Parser, new[]{ "SendTime", "TimeSinceGameStartMs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ////////////////////////////////////////////////////battle message
  ///坦克信息
  /// </summary>
  public sealed partial class TankInfo : pb::IMessage<TankInfo> {
    private static readonly pb::MessageParser<TankInfo> _parser = new pb::MessageParser<TankInfo>(() => new TankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TankInfo(TankInfo other) : this() {
      id_ = other.id_;
      camp_ = other.camp_;
      hp_ = other.hp_;
      frameid_ = other.frameid_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      ex_ = other.ex_;
      ey_ = other.ey_;
      ez_ = other.ez_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TankInfo Clone() {
      return new TankInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 2;
    private int camp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "frameid" field.</summary>
    public const int FrameidFieldNumber = 4;
    private int frameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frameid {
      get { return frameid_; }
      set {
        frameid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 5;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 6;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 7;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "ex" field.</summary>
    public const int ExFieldNumber = 8;
    private int ex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ex {
      get { return ex_; }
      set {
        ex_ = value;
      }
    }

    /// <summary>Field number for the "ey" field.</summary>
    public const int EyFieldNumber = 9;
    private int ey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ey {
      get { return ey_; }
      set {
        ey_ = value;
      }
    }

    /// <summary>Field number for the "ez" field.</summary>
    public const int EzFieldNumber = 10;
    private int ez_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ez {
      get { return ez_; }
      set {
        ez_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Camp != other.Camp) return false;
      if (Hp != other.Hp) return false;
      if (Frameid != other.Frameid) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Ex != other.Ex) return false;
      if (Ey != other.Ey) return false;
      if (Ez != other.Ez) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Frameid != 0) hash ^= Frameid.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (Ex != 0) hash ^= Ex.GetHashCode();
      if (Ey != 0) hash ^= Ey.GetHashCode();
      if (Ez != 0) hash ^= Ez.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Camp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Camp);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (Frameid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Frameid);
      }
      if (X != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Z);
      }
      if (Ex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ex);
      }
      if (Ey != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Ey);
      }
      if (Ez != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Ez);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Frameid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frameid);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (Ex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ex);
      }
      if (Ey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ey);
      }
      if (Ez != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ez);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TankInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Frameid != 0) {
        Frameid = other.Frameid;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      if (other.Ex != 0) {
        Ex = other.Ex;
      }
      if (other.Ey != 0) {
        Ey = other.Ey;
      }
      if (other.Ez != 0) {
        Ez = other.Ez;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Camp = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            Frameid = input.ReadInt32();
            break;
          }
          case 40: {
            X = input.ReadInt32();
            break;
          }
          case 48: {
            Y = input.ReadInt32();
            break;
          }
          case 56: {
            Z = input.ReadInt32();
            break;
          }
          case 64: {
            Ex = input.ReadInt32();
            break;
          }
          case 72: {
            Ey = input.ReadInt32();
            break;
          }
          case 80: {
            Ez = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入战场（服务端推送）
  /// </summary>
  public sealed partial class MsgEnterBattle : pb::IMessage<MsgEnterBattle> {
    private static readonly pb::MessageParser<MsgEnterBattle> _parser = new pb::MessageParser<MsgEnterBattle>(() => new MsgEnterBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgEnterBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterBattle(MsgEnterBattle other) : this() {
      tanks_ = other.tanks_.Clone();
      mapId_ = other.mapId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterBattle Clone() {
      return new MsgEnterBattle(this);
    }

    /// <summary>Field number for the "tanks" field.</summary>
    public const int TanksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.TankInfo> _repeated_tanks_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.TankInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.TankInfo> tanks_ = new pbc::RepeatedField<global::Pb.TankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.TankInfo> Tanks {
      get { return tanks_; }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 2;
    private int mapId_;
    /// <summary>
    ///地图，只有一张
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgEnterBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgEnterBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tanks_.Equals(other.tanks_)) return false;
      if (MapId != other.MapId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tanks_.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tanks_.WriteTo(output, _repeated_tanks_codec);
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tanks_.CalculateSize(_repeated_tanks_codec);
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgEnterBattle other) {
      if (other == null) {
        return;
      }
      tanks_.Add(other.tanks_);
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tanks_.AddEntriesFrom(input, _repeated_tanks_codec);
            break;
          }
          case 16: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗结果（服务端推送）
  /// </summary>
  public sealed partial class MsgBattleResult : pb::IMessage<MsgBattleResult> {
    private static readonly pb::MessageParser<MsgBattleResult> _parser = new pb::MessageParser<MsgBattleResult>(() => new MsgBattleResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBattleResult(MsgBattleResult other) : this() {
      winCamp_ = other.winCamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBattleResult Clone() {
      return new MsgBattleResult(this);
    }

    /// <summary>Field number for the "winCamp" field.</summary>
    public const int WinCampFieldNumber = 1;
    private int winCamp_;
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinCamp {
      get { return winCamp_; }
      set {
        winCamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinCamp != other.WinCamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinCamp != 0) hash ^= WinCamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinCamp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinCamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinCamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBattleResult other) {
      if (other == null) {
        return;
      }
      if (other.WinCamp != 0) {
        WinCamp = other.WinCamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WinCamp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家退出（服务端推送）
  /// </summary>
  public sealed partial class MsgLeaveBattle : pb::IMessage<MsgLeaveBattle> {
    private static readonly pb::MessageParser<MsgLeaveBattle> _parser = new pb::MessageParser<MsgLeaveBattle>(() => new MsgLeaveBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLeaveBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLeaveBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLeaveBattle(MsgLeaveBattle other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLeaveBattle Clone() {
      return new MsgLeaveBattle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLeaveBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLeaveBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLeaveBattle other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家输入
  /// </summary>
  public sealed partial class PlayerInput : pb::IMessage<PlayerInput> {
    private static readonly pb::MessageParser<PlayerInput> _parser = new pb::MessageParser<PlayerInput>(() => new PlayerInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput(PlayerInput other) : this() {
      u_ = other.u_;
      v_ = other.v_;
      fire_ = other.fire_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput Clone() {
      return new PlayerInput(this);
    }

    /// <summary>Field number for the "U" field.</summary>
    public const int UFieldNumber = 1;
    private int u_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U {
      get { return u_; }
      set {
        u_ = value;
      }
    }

    /// <summary>Field number for the "V" field.</summary>
    public const int VFieldNumber = 2;
    private int v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "Fire" field.</summary>
    public const int FireFieldNumber = 3;
    private bool fire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fire {
      get { return fire_; }
      set {
        fire_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (U != other.U) return false;
      if (V != other.V) return false;
      if (Fire != other.Fire) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (U != 0) hash ^= U.GetHashCode();
      if (V != 0) hash ^= V.GetHashCode();
      if (Fire != false) hash ^= Fire.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (U != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(U);
      }
      if (V != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(V);
      }
      if (Fire != false) {
        output.WriteRawTag(24);
        output.WriteBool(Fire);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (U != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U);
      }
      if (V != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(V);
      }
      if (Fire != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInput other) {
      if (other == null) {
        return;
      }
      if (other.U != 0) {
        U = other.U;
      }
      if (other.V != 0) {
        V = other.V;
      }
      if (other.Fire != false) {
        Fire = other.Fire;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            U = input.ReadInt32();
            break;
          }
          case 16: {
            V = input.ReadInt32();
            break;
          }
          case 24: {
            Fire = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInputCmd : pb::IMessage<PlayerInputCmd> {
    private static readonly pb::MessageParser<PlayerInputCmd> _parser = new pb::MessageParser<PlayerInputCmd>(() => new PlayerInputCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInputCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputCmd(PlayerInputCmd other) : this() {
      isMissing_ = other.isMissing_;
      cmd_ = other.cmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputCmd Clone() {
      return new PlayerInputCmd(this);
    }

    /// <summary>Field number for the "isMissing" field.</summary>
    public const int IsMissingFieldNumber = 1;
    private bool isMissing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMissing {
      get { return isMissing_; }
      set {
        isMissing_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private pb::ByteString cmd_ = pb::ByteString.Empty;
    /// <summary>
    /// PlayerInput编码后的命令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInputCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInputCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsMissing != other.IsMissing) return false;
      if (Cmd != other.Cmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsMissing != false) hash ^= IsMissing.GetHashCode();
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsMissing != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsMissing);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsMissing != false) {
        size += 1 + 1;
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInputCmd other) {
      if (other == null) {
        return;
      }
      if (other.IsMissing != false) {
        IsMissing = other.IsMissing;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsMissing = input.ReadBool();
            break;
          }
          case 18: {
            Cmd = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerFrame : pb::IMessage<ServerFrame> {
    private static readonly pb::MessageParser<ServerFrame> _parser = new pb::MessageParser<ServerFrame>(() => new ServerFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerFrame(ServerFrame other) : this() {
      tick_ = other.tick_;
      inputs_ = other.inputs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerFrame Clone() {
      return new ServerFrame(this);
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.PlayerInputCmd> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.PlayerInputCmd.Parser);
    private readonly pbc::RepeatedField<global::Pb.PlayerInputCmd> inputs_ = new pbc::RepeatedField<global::Pb.PlayerInputCmd>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.PlayerInputCmd> Inputs {
      get { return inputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tick != other.Tick) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tick != 0) hash ^= Tick.GetHashCode();
      hash ^= inputs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tick);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerFrame other) {
      if (other == null) {
        return;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      inputs_.Add(other.inputs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tick = input.ReadInt32();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgServerFrames : pb::IMessage<MsgServerFrames> {
    private static readonly pb::MessageParser<MsgServerFrames> _parser = new pb::MessageParser<MsgServerFrames>(() => new MsgServerFrames());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgServerFrames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgServerFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgServerFrames(MsgServerFrames other) : this() {
      startTick_ = other.startTick_;
      frames_ = other.frames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgServerFrames Clone() {
      return new MsgServerFrames(this);
    }

    /// <summary>Field number for the "startTick" field.</summary>
    public const int StartTickFieldNumber = 1;
    private int startTick_;
    /// <summary>
    /// 开始帧的帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTick {
      get { return startTick_; }
      set {
        startTick_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.ServerFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.ServerFrame.Parser);
    private readonly pbc::RepeatedField<global::Pb.ServerFrame> frames_ = new pbc::RepeatedField<global::Pb.ServerFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ServerFrame> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgServerFrames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgServerFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTick != other.StartTick) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTick != 0) hash ^= StartTick.GetHashCode();
      hash ^= frames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartTick);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTick);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgServerFrames other) {
      if (other == null) {
        return;
      }
      if (other.StartTick != 0) {
        StartTick = other.StartTick;
      }
      frames_.Add(other.frames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTick = input.ReadInt32();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgClientInputs : pb::IMessage<MsgClientInputs> {
    private static readonly pb::MessageParser<MsgClientInputs> _parser = new pb::MessageParser<MsgClientInputs>(() => new MsgClientInputs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgClientInputs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgClientInputs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgClientInputs(MsgClientInputs other) : this() {
      lastTick_ = other.lastTick_;
      inputs_ = other.inputs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgClientInputs Clone() {
      return new MsgClientInputs(this);
    }

    /// <summary>Field number for the "lastTick" field.</summary>
    public const int LastTickFieldNumber = 1;
    private int lastTick_;
    /// <summary>
    /// 最后一帧的帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTick {
      get { return lastTick_; }
      set {
        lastTick_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.PlayerInputCmd> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.PlayerInputCmd.Parser);
    private readonly pbc::RepeatedField<global::Pb.PlayerInputCmd> inputs_ = new pbc::RepeatedField<global::Pb.PlayerInputCmd>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.PlayerInputCmd> Inputs {
      get { return inputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgClientInputs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgClientInputs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastTick != other.LastTick) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastTick != 0) hash ^= LastTick.GetHashCode();
      hash ^= inputs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastTick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LastTick);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTick);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgClientInputs other) {
      if (other == null) {
        return;
      }
      if (other.LastTick != 0) {
        LastTick = other.LastTick;
      }
      inputs_.Add(other.inputs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastTick = input.ReadInt32();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgMissFrame : pb::IMessage<MsgMissFrame> {
    private static readonly pb::MessageParser<MsgMissFrame> _parser = new pb::MessageParser<MsgMissFrame>(() => new MsgMissFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgMissFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgMissFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgMissFrame(MsgMissFrame other) : this() {
      tick_ = other.tick_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgMissFrame Clone() {
      return new MsgMissFrame(this);
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgMissFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgMissFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tick != other.Tick) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tick != 0) hash ^= Tick.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgMissFrame other) {
      if (other == null) {
        return;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tick = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgMissingServerFrames : pb::IMessage<MsgMissingServerFrames> {
    private static readonly pb::MessageParser<MsgMissingServerFrames> _parser = new pb::MessageParser<MsgMissingServerFrames>(() => new MsgMissingServerFrames());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgMissingServerFrames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgMissingServerFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgMissingServerFrames(MsgMissingServerFrames other) : this() {
      startTick_ = other.startTick_;
      frames_ = other.frames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgMissingServerFrames Clone() {
      return new MsgMissingServerFrames(this);
    }

    /// <summary>Field number for the "startTick" field.</summary>
    public const int StartTickFieldNumber = 1;
    private int startTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTick {
      get { return startTick_; }
      set {
        startTick_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.ServerFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.ServerFrame.Parser);
    private readonly pbc::RepeatedField<global::Pb.ServerFrame> frames_ = new pbc::RepeatedField<global::Pb.ServerFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ServerFrame> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgMissingServerFrames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgMissingServerFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTick != other.StartTick) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTick != 0) hash ^= StartTick.GetHashCode();
      hash ^= frames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartTick);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTick);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgMissingServerFrames other) {
      if (other == null) {
        return;
      }
      if (other.StartTick != 0) {
        StartTick = other.StartTick;
      }
      frames_.Add(other.frames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTick = input.ReadInt32();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册
  /// </summary>
  public sealed partial class MsgRegister : pb::IMessage<MsgRegister> {
    private static readonly pb::MessageParser<MsgRegister> _parser = new pb::MessageParser<MsgRegister>(() => new MsgRegister());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegister(MsgRegister other) : this() {
      id_ = other.id_;
      pw_ = other.pw_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegister Clone() {
      return new MsgRegister(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///客户端发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pw" field.</summary>
    public const int PwFieldNumber = 2;
    private string pw_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pw {
      get { return pw_; }
      set {
        pw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    /// <summary>
    ///服务端回（0-成功，1-失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Pw != other.Pw) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Pw.Length != 0) hash ^= Pw.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Pw.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pw);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Pw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pw);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgRegister other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Pw.Length != 0) {
        Pw = other.Pw;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Pw = input.ReadString();
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登陆
  /// </summary>
  public sealed partial class MsgLogin : pb::IMessage<MsgLogin> {
    private static readonly pb::MessageParser<MsgLogin> _parser = new pb::MessageParser<MsgLogin>(() => new MsgLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLogin(MsgLogin other) : this() {
      id_ = other.id_;
      pw_ = other.pw_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLogin Clone() {
      return new MsgLogin(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///客户端发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pw" field.</summary>
    public const int PwFieldNumber = 2;
    private string pw_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pw {
      get { return pw_; }
      set {
        pw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    /// <summary>
    ///服务端回（0-成功，1-失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Pw != other.Pw) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Pw.Length != 0) hash ^= Pw.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Pw.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pw);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Pw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pw);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLogin other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Pw.Length != 0) {
        Pw = other.Pw;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Pw = input.ReadString();
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///踢下线（服务端推送）
  /// </summary>
  public sealed partial class MsgKick : pb::IMessage<MsgKick> {
    private static readonly pb::MessageParser<MsgKick> _parser = new pb::MessageParser<MsgKick>(() => new MsgKick());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgKick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKick(MsgKick other) : this() {
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgKick Clone() {
      return new MsgKick(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private int reason_;
    /// <summary>
    ///原因（0-其他人登陆同一账号）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgKick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgKick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgKick other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询成绩
  /// </summary>
  public sealed partial class MsgGetAchieve : pb::IMessage<MsgGetAchieve> {
    private static readonly pb::MessageParser<MsgGetAchieve> _parser = new pb::MessageParser<MsgGetAchieve>(() => new MsgGetAchieve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgGetAchieve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetAchieve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetAchieve(MsgGetAchieve other) : this() {
      win_ = other.win_;
      lost_ = other.lost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetAchieve Clone() {
      return new MsgGetAchieve(this);
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 1;
    private int win_;
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "lost" field.</summary>
    public const int LostFieldNumber = 2;
    private int lost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lost {
      get { return lost_; }
      set {
        lost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgGetAchieve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgGetAchieve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Win != other.Win) return false;
      if (Lost != other.Lost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Lost != 0) hash ^= Lost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Win != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Win);
      }
      if (Lost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Lost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgGetAchieve other) {
      if (other == null) {
        return;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Lost != 0) {
        Lost = other.Lost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Win = input.ReadInt32();
            break;
          }
          case 16: {
            Lost = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间信息
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///状态0-准备中 1-战斗中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求房间列表
  /// </summary>
  public sealed partial class MsgGetRoomList : pb::IMessage<MsgGetRoomList> {
    private static readonly pb::MessageParser<MsgGetRoomList> _parser = new pb::MessageParser<MsgGetRoomList>(() => new MsgGetRoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgGetRoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetRoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetRoomList(MsgGetRoomList other) : this() {
      rooms_ = other.rooms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetRoomList Clone() {
      return new MsgGetRoomList(this);
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.RoomInfo> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.RoomInfo> rooms_ = new pbc::RepeatedField<global::Pb.RoomInfo>();
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.RoomInfo> Rooms {
      get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgGetRoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgGetRoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rooms_.Equals(other.rooms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rooms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgGetRoomList other) {
      if (other == null) {
        return;
      }
      rooms_.Add(other.rooms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建房间
  /// </summary>
  public sealed partial class MsgCreateRoom : pb::IMessage<MsgCreateRoom> {
    private static readonly pb::MessageParser<MsgCreateRoom> _parser = new pb::MessageParser<MsgCreateRoom>(() => new MsgCreateRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCreateRoom(MsgCreateRoom other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCreateRoom Clone() {
      return new MsgCreateRoom(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入房间
  /// </summary>
  public sealed partial class MsgEnterRoom : pb::IMessage<MsgEnterRoom> {
    private static readonly pb::MessageParser<MsgEnterRoom> _parser = new pb::MessageParser<MsgEnterRoom>(() => new MsgEnterRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgEnterRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterRoom(MsgEnterRoom other) : this() {
      id_ = other.id_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgEnterRoom Clone() {
      return new MsgEnterRoom(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///客户端发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgEnterRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgEnterRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgEnterRoom other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家信息
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      camp_ = other.camp_;
      win_ = other.win_;
      lost_ = other.lost_;
      isOwner_ = other.isOwner_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 2;
    private int camp_;
    /// <summary>
    ///阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private int win_;
    /// <summary>
    ///胜利数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "lost" field.</summary>
    public const int LostFieldNumber = 4;
    private int lost_;
    /// <summary>
    ///失败数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lost {
      get { return lost_; }
      set {
        lost_ = value;
      }
    }

    /// <summary>Field number for the "isOwner" field.</summary>
    public const int IsOwnerFieldNumber = 5;
    private int isOwner_;
    /// <summary>
    ///是否是房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOwner {
      get { return isOwner_; }
      set {
        isOwner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Camp != other.Camp) return false;
      if (Win != other.Win) return false;
      if (Lost != other.Lost) return false;
      if (IsOwner != other.IsOwner) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Lost != 0) hash ^= Lost.GetHashCode();
      if (IsOwner != 0) hash ^= IsOwner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Camp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Camp);
      }
      if (Win != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Win);
      }
      if (Lost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lost);
      }
      if (IsOwner != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsOwner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Lost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lost);
      }
      if (IsOwner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOwner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Lost != 0) {
        Lost = other.Lost;
      }
      if (other.IsOwner != 0) {
        IsOwner = other.IsOwner;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Camp = input.ReadInt32();
            break;
          }
          case 24: {
            Win = input.ReadInt32();
            break;
          }
          case 32: {
            Lost = input.ReadInt32();
            break;
          }
          case 40: {
            IsOwner = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取房间信息
  /// </summary>
  public sealed partial class MsgGetRoomInfo : pb::IMessage<MsgGetRoomInfo> {
    private static readonly pb::MessageParser<MsgGetRoomInfo> _parser = new pb::MessageParser<MsgGetRoomInfo>(() => new MsgGetRoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgGetRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetRoomInfo(MsgGetRoomInfo other) : this() {
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgGetRoomInfo Clone() {
      return new MsgGetRoomInfo(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Pb.PlayerInfo> players_ = new pbc::RepeatedField<global::Pb.PlayerInfo>();
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.PlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgGetRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgGetRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgGetRoomInfo other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///离开房间
  /// </summary>
  public sealed partial class MsgLeaveRoom : pb::IMessage<MsgLeaveRoom> {
    private static readonly pb::MessageParser<MsgLeaveRoom> _parser = new pb::MessageParser<MsgLeaveRoom>(() => new MsgLeaveRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLeaveRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLeaveRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLeaveRoom(MsgLeaveRoom other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLeaveRoom Clone() {
      return new MsgLeaveRoom(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLeaveRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLeaveRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLeaveRoom other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开战
  /// </summary>
  public sealed partial class MsgStartBattle : pb::IMessage<MsgStartBattle> {
    private static readonly pb::MessageParser<MsgStartBattle> _parser = new pb::MessageParser<MsgStartBattle>(() => new MsgStartBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgStartBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgStartBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgStartBattle(MsgStartBattle other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgStartBattle Clone() {
      return new MsgStartBattle(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///服务端回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgStartBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgStartBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgStartBattle other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgTankHp : pb::IMessage<MsgTankHp> {
    private static readonly pb::MessageParser<MsgTankHp> _parser = new pb::MessageParser<MsgTankHp>(() => new MsgTankHp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgTankHp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTankHp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTankHp(MsgTankHp other) : this() {
      hp_ = other.hp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTankHp Clone() {
      return new MsgTankHp(this);
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 1;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgTankHp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgTankHp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hp != other.Hp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hp != 0) hash ^= Hp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Hp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgTankHp other) {
      if (other == null) {
        return;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Hp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgPlayerPing : pb::IMessage<MsgPlayerPing> {
    private static readonly pb::MessageParser<MsgPlayerPing> _parser = new pb::MessageParser<MsgPlayerPing>(() => new MsgPlayerPing());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerPing(MsgPlayerPing other) : this() {
      sendTime_ = other.sendTime_;
      timeSinceGameStartMs_ = other.timeSinceGameStartMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerPing Clone() {
      return new MsgPlayerPing(this);
    }

    /// <summary>Field number for the "sendTime" field.</summary>
    public const int SendTimeFieldNumber = 1;
    private long sendTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "timeSinceGameStartMs" field.</summary>
    public const int TimeSinceGameStartMsFieldNumber = 2;
    private long timeSinceGameStartMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeSinceGameStartMs {
      get { return timeSinceGameStartMs_; }
      set {
        timeSinceGameStartMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendTime != other.SendTime) return false;
      if (TimeSinceGameStartMs != other.TimeSinceGameStartMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SendTime != 0L) hash ^= SendTime.GetHashCode();
      if (TimeSinceGameStartMs != 0L) hash ^= TimeSinceGameStartMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SendTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SendTime);
      }
      if (TimeSinceGameStartMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeSinceGameStartMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SendTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (TimeSinceGameStartMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeSinceGameStartMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerPing other) {
      if (other == null) {
        return;
      }
      if (other.SendTime != 0L) {
        SendTime = other.SendTime;
      }
      if (other.TimeSinceGameStartMs != 0L) {
        TimeSinceGameStartMs = other.TimeSinceGameStartMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SendTime = input.ReadInt64();
            break;
          }
          case 16: {
            TimeSinceGameStartMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
